#===========#
# Variables #
#===========#

#-------------------#
# Project Structure #
#-------------------#

PROJECT = Project_Name

BLDDIR	= build
DOCDIR	= docs
INCDIR	= include
OBJDIR	= obj
SRCDIR	= src

STRUCTURE	= $(BLDDIR) \
		  $(BLDDIR)/$(DOCDIR) \
		  $(DOCDIR) \
		  $(INCDIR) \
		  $(OBJDIR) \
		  $(SRCDIR)

CONSTRUCTS	= $(BLDDIR) \
		  $(OBJDIR) 

#-------#
# Files #
#-------#

# wildcards
C	= $(wildcard $(SRCDIR)/*.c)
CPP	= $(wildcard $(SRCDIR)/*.cpp)
H	= $(wildcard $(INCDIR)/*.h) \
	  $(wildcard $(SRCDIR)/*.h)
OBJ	= $(patsubst $(SRCDIR)/%.c, $(OBJDIR)/%.o, $(C)) \
	  $(patsubst $(SRCDIR)/%.cpp, $(OBJDIR)/%.o, $(CPP))
MD	= $(wildcard $(DOCDIR)/*.md)
PDF	= $(patsubst $(DOCDIR)/%.md, $(BLDDIR)/$(DOCDIR)/%.pdf, $(MD))

# absolute names
DOCINDEX	= $(DOCDIR)/index.md
EXEC	= $(BLDDIR)/$(PROJECT)
LICENSE	= LICENSE.md
MAIN	= $(SRCDIR)/main.cpp
README	= README.md

#------------------#
# Compiler Options #
#------------------#

# compilers
CACHER	= ccache # blank to not use cacher
CC	= $(CACHER) clang
CXX	= $(CACHER) clang++

# compiler flags
ERRFLAGS	= -Werror -Wpedantic -Wall -Wextra -Weverything \
		  -Wno-unused-parameter \
		  -Wno-c++98-compat
CFLAGS	= -I$(INCDIR) -I$(SRCDIR) $(ERRFLAGS) $(FLAGS)
	  # use FLAGS to add flags from the command line
CXXFLAGS	= $(CFLAGS) -std=c++14

#-----------#
# Gitignore #
#-----------#

IGNOREDFOLDERS	= $(CONSTRUCTS)
IGNOREDFILES	= 

#=========#
# Targets #
#=========#

.PHONY: all clean config docs git project run template

all: template docs run

clean:
	rm -rf $(CONSTRUCTS)

config:
	# for ubuntu
	sudo apt-get install ccache clang git pandoc

docs: $(DOCINDEX) $(PDF)

project: .git
	mkdir -p $(STRUCTURE)

run:	$(EXEC)
	./$(EXEC)

template: .gitignore $(LICENSE) $(MAIN) $(README)

#=========#
# RECIPES #
#=========#

#-----#
# Git #
#-----#

.git:
	git init

.gitignore: Makefile
	echo "# This file is automatically generated by the Makefile." > $@
	echo "# Any edits will be overwritten." >> $@
	echo "\n# IGNOREDFOLDERS" >> $@
	$(foreach folder, $(IGNOREDFOLDERS), echo $(strip $(folder))/ >> $@;)
	echo "\n# IGNOREDFILES" >> $@
	$(foreach file, $(IGNOREDFILES), echo $(strip $(file)) >> $@;)

#---------------#
# Documentation #
#---------------#

$(BLDDIR)/$(DOCDIR):
	mkdir -p $@

$(BLDDIR)/$(DOCDIR)/%.pdf: $(DOCDIR)/%.md $(BLDDIR)/$(DOCDIR)
	pandoc $< -o $@

$(DOCINDEX):
	echo "# $(PROJECT)\nDocumentation index" > $@

$(LICENSE):
	echo "Copyright (c) $(shell date +%Y). All rights reserved." > $@

$(README):
	echo "# $(PROJECT)\nReadme" > $@

#---------#
# Program #
#---------#

$(EXEC): $(OBJ)
	$(CXX) -o $@ $^ $(CXXFLAGS)

$(MAIN):
	echo "int main(void){return 0;}" > $@

$(OBJDIR)/%.o: $(SRCDIR)/%.cpp $(H)
	$(CXX) -c -o $@ $< $(CXXFLAGS)
